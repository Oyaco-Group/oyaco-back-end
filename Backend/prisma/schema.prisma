// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  name             String
  email            String            @unique
  address          String
  password         String            @unique
  user_role        String
  image_url        String?
  isdelete         Boolean           @default(false)
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  order            Order[]
  product_movement ProductMovement[]
}

model Order {
  id           Int          @id @default(autoincrement())
  user_id      Int          
  payment_type String
  order_status String
  buyer_status String
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  user         User         @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  complaint    Complaint?
  order_item   order_item[]
}

model Complaint {
  id          Int      @id @default(autoincrement())
  order_id    Int      @unique
  iscomplaint Boolean  @default(false)
  text        String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  order       Order?   @relation(fields: [order_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model order_item {
  id                Int           @id @default(autoincrement())
  order_id          Int
  master_product_id Int
  inventory_id      Int
  quantity          Int
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  order             Order         @relation(fields: [order_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  master_product    MasterProduct @relation(fields: [master_product_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  inventory         Inventory     @relation(fields: [inventory_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Warehouse {
  id         Int         @id @default(autoincrement())
  name       String
  location   String
  isdelete   Boolean     @default(false)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  inventory  Inventory[]
}

model Inventory {
  id                Int               @id @default(autoincrement())
  master_product_id Int
  warehouse_id      Int               
  quantity          Int
  isdelete          Boolean           @default(false)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  warehouse         Warehouse         @relation(fields: [warehouse_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  product_movement  ProductMovement[]
  master_product    MasterProduct     @relation(fields: [master_product_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  order_item        order_item[]
}

model ProductMovement {
  id                Int           @id @default(autoincrement())
  user_id           Int
  master_product_id Int
  inventory_id      Int
  movement_type     String
  origin            String?
  destination       String?
  quantity          Int
  iscondition_good  Boolean       @default(true)
  arrival_date      DateTime      @default(now())
  expiration_date   DateTime      @default(now())
  expiration_status Boolean       @default(false)
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  user              User          @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  master_product    MasterProduct @relation(fields: [master_product_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  inventory         Inventory     @relation(fields: [inventory_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model MasterProduct {
  id               Int               @id @default(autoincrement())
  name             String
  image            String?
  sku              String            @unique
  slugify          String?
  price            String
  category_id      Int
  isdelete         Boolean           @default(false)
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  category         Category          @relation(fields: [category_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  inventory        Inventory[]
  product_movement ProductMovement[]
  order_item       order_item[]
}

model Category {
  id             Int             @id @default(autoincrement())
  name           String
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  master_product MasterProduct[]
}
